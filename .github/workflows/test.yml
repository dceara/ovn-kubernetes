name: ovn-ci

on:
  push:
  merge_group:
  pull_request:
    branches: [ master ]
  schedule:
    - cron: '0 */12 * * *'

permissions:
  contents: read

env:
  GO_VERSION: "1.19.6"
  K8S_VERSION: v1.24.0
  KIND_CLUSTER_NAME: ovn
  KIND_INSTALL_INGRESS: true
  KIND_ALLOW_SYSTEM_WRITES: true
  # This skips tests tagged as Serial
  # Current Serial tests are not relevant for OVN
  PARALLEL: true

  # This must be a directory
  CI_IMAGE_CACHE: tmp/image_cache/
  CI_IMAGE_MASTER_TAR: image-master.tar
  CI_IMAGE_PR_TAR: image-pr.tar
  CI_DIST_IMAGES_OUTPUT: dist/images/_output/


jobs:
  build-pr:
    name: Build-PR
    runs-on: ubuntu-latest
    steps:
    # Create a cache for the build PR image
    - name: Restore PR image cache
      id: image_cache_pr
      uses: actions/cache@v3
      with:
        path: |
          ${{ env.CI_IMAGE_CACHE }}
        key: ${{ github.run_id }}-image-cache-pr

    - name: Check if PR image build is needed
      id: is_pr_image_build_needed
      continue-on-error: true
      run: |
        set -x
        if [ -f ${CI_IMAGE_CACHE}/${CI_IMAGE_PR_TAR}.gz ]; then
            mkdir -p ${CI_DIST_IMAGES_OUTPUT}
            cp ${CI_IMAGE_CACHE}/${CI_IMAGE_PR_TAR}.gz ${CI_DIST_IMAGES_OUTPUT}/${CI_IMAGE_PR_TAR}.gz
            gunzip ${CI_DIST_IMAGES_OUTPUT}/${CI_IMAGE_PR_TAR}.gz
            echo "::set-output name=PR_IMAGE_RESTORED::true"
        fi

    # only run the following steps if the PR image was not found in the cache
    - name: Set up Go
      if: steps.is_pr_image_build_needed.outputs.PR_IMAGE_RESTORED != 'true' && success()
      uses: actions/setup-go@v3
      with:
        go-version: ${{ env.GO_VERSION }}
      id: go

    - name: Check out code into the Go module directory - from current pr branch
      if: steps.is_pr_image_build_needed.outputs.PR_IMAGE_RESTORED != 'true' && success()
      uses: actions/checkout@v3

    - name: Build docker image - from current pr branch
      if: steps.is_pr_image_build_needed.outputs.PR_IMAGE_RESTORED != 'true' && success()
      run: |
        pushd dist/images
          echo "ref: $(git rev-parse  --symbolic-full-name HEAD)  commit: $(git rev-parse  HEAD)" > git_info
          docker build -t ovn-daemonset-f:pr \
            --build-arg UPSTREAM_OVS_RPMS_BRANCH=master \
            --build-arg UPSTREAM_OVN_RPMS_BRANCH=main \
            --build-arg GITHUB_TOKEN=${{ secrets.GITHUB_TOKEN }} \
            -f Dockerfile.fedora .
          mkdir _output
          docker save ovn-daemonset-f:pr > _output/${CI_IMAGE_PR_TAR}
        popd
